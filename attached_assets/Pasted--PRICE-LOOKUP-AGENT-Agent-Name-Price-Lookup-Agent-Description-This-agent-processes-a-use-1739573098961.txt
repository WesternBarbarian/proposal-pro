# PRICE LOOKUP AGENT
"""
Agent Name: Price Lookup Agent

Description:
    This agent processes a user's request to identify items, units, quantities, and prices 
    by looking up the relevant information from a structured price list. It returns 
    a standardized line-item list.

Inputs:
    - price_list (json): A structured price list containing available items, units, and prices.
    - user_request (str): A plain-text request describing the items and quantities.

Outputs:
    - Pydantic object: A validated line-item list with extracted items, units, quantities, and prices.

Assumptions:
    - The `price_list` contains valid and up-to-date pricing information.
    - The `user_request` is structured in a way that can be parsed effectively.
    - If an item is not found in the `price_list`, it may be returned as "unknown" or omitted.

Example Usage:
    User Request: "I need 2 drills and 5 boxes of nails."
   
"""


sys_instruct="""##Role: You are a pricing specialist.
You look up the price of items from the provided list.
##Task: Look up prices.
##Task Guidance: Items may have alternative names. When you know what the user means, look up the price for that item.
If you do not know what an item is, or if it is not in the list, enter the price as zero in your response.
If you are provided with a quantity, return the quantity for the item in the json response.
If you are not provided with a quantity put zero. DO NOT GUESS ABOUT QUANTITY.
Carefully review the users input and make sure you know the quantity for each item.
### Example 1:
{
  "role": "user",
  "parts": [
    "I need 3 drills, work lights, and 1 ladder."
  ]
},
{
  "role": "model",
  "parts": [
    json
    [
      {
        "item": "Cordless Drill",
        "quantity": "3",
        "price": "79.99"
      },
      {
        "item": "LED Work Light",
        "quantity": "unknown",
        "price": "39.99"
      },
      {
        "item": "Ladder (6ft)",
        "quantity": "1",
        "price": "89.99"
      }
    ]
  ]
}

### Example 2:
{
  "role": "user",
  "parts": [
    "two leaf blowers, drills, and ladders."
  ]
},
{
  "role": "model",
  "parts": [
    json
    [
      {
        "item": "Leaf Blower",
        "quantity": "2",
        "price": "unknown"
      },
      {
        "item": "Cordless Drill",
        "quantity": "unknown",
        "price": "79.99"
      },
      {
        "item": "Ladder (6ft)",
        "quantity": "unknown",
        "price": "89.99"
      }
    ]
  ]
}

### Example 3:
{
  "role": "user",
  "parts": [
    "1 stud finder, 3 ceiling fans, a ladder, a circular saw, and work lights."
  ]
},
{
  "role": "model",
  "parts": [
    json
    [
      {
        "item": "Stud Finder",
        "quantity": "1",
        "price": "34.99"
      },
      {
        "item": "Ceiling Fan",
        "quantity": "3",
        "price": "149.99"
      },
      {
        "item": "Ladder (6ft)",
        "quantity": "1",
        "price": "89.99"
      },
      {
        "item": "Circular Saw",
        "quantity": "1",
        "price": "129.99"
      },
      {
        "item": "LED Work Light",
        "quantity": "unknown",
        "price": "39.99"
      }
    ]
  ]
}
"""

class Line_Item(BaseModel):
  name: str = Field(description="The name of the item, if unclear or not available, please return 'unknown'")
  unit: str = Field(description="The unit of the item, if unclear or not available, please return 'unknown'")
  price: int = Field(description="The price of the item, if unclear or not available, please return zero")
  quantity: int = Field(description="The quantity of the item, if unclear or not available, please return zero")

  @computed_field
  def total(self) -> int:
    return self.price * self.quantity

class Line_Items(BaseModel):
  lines: list[Line_Item] = Field(description="The list of line items with the item name, price, and quantity.")

  @computed_field
  def sub_total(self) -> int:
      """Calculates the sum of all line item totals."""
      return sum(line.total for line in self.lines)


price_list = price_list 


user_request= user_request

prompt = f"Look up the prices from the {price_list} for the items in {user_request}"
response = client.models.generate_content(
    model=model,
    contents=prompt,
    config = types.GenerateContentConfig(
        system_instruction=sys_instruct,
        response_mime_type='application/json', 
        response_schema=Line_Items,
    ),
)

print(response.text)

Line_Items: Line_Items = response.parsed